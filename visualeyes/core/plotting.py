import pandas as pd
import numpy as np
from eyelinkio import read_edf
import matplotlib.pyplot as plt
import os
import visualeyes

def plot_fixations_aoi(epoch_data, aoi_mask, save_png = None, save_path=None):
    """
    plot the fixations on the AOI mask, and optionally save the plot as a PNG file.

    Inputs:
    - epoch_data : pd.DataFrame
        data epoched generated by 'epoch_data' in processing.py
    - aoi_definitions: list of dict
        Each dict defines one AOI (so we can have multiple) with keys:
        - 'shape': 'rectangle' or 'circle'.
        - 'coordinates': tuple of coordinates:
            - for rectangluar AOI's: (x1, x2, y1, y2), upper-bounds non-inclusive. 
            - for circlular AOI's: (x_center, y_center, radius).
    - save_png: bool or None
        If True, the results will be saved as png file(s)
    - save_path: str or None
        The file path where the png file(s) will be saved if 'save_png' is True
        
    Outputs:
    - ratios: list
        ratios of fixations within the Area of Interest (one ratio per epoch)
    - png file(s): png

    """

    # check if input data is a pd.DataFrame
    if not isinstance(epoch_data, pd.DataFrame):
        raise ValueError("Input data should be a pandas dataframe")
    
    if 'epoch_index' not in epoch_data.columns:
        raise ValueError("Column 'epoch_index' does not exist in the input dataframe")

    # validate the input dataframe and save the x and y coordinates if the dataframe is valid
    x_coord, y_coord = visualeyes.dataframe_validation(epoch_data)
    
    screen_dimension = (aoi_mask.shape[1], aoi_mask.shape[0])

    visualeyes.aoi_mask_validation(aoi_mask, screen_dimension)

    for index in epoch_data['epoch_index'].unique():
        epoch_x = x_coord[x_coord['epoch_index'] == index]
        epoch_y = y_coord[y_coord['epoch_index'] == index]

        out_of_bounds = any(x < 0 or x >= aoi_mask.shape[1] or y < 0 or y >= aoi_mask.shape[0]
                           for x,y in zip(epoch_x, epoch_y)
                           )

        if out_of_bounds:
            print(f"Some coordinates for epoch {index} are out of bounds")

        else:

            plt.imshow(aoi_mask, cmap='gray')

            plt.title(f"plot epoch {index} data on AOI mask")

            plt.set_xlim(0, aoi_mask.shape[1]-1)

            plt.set_ylim(0, aoi_mask.shape[0]-1)

            plt.gca().set_ylim(plt.gca().get_ylim()[::-1]) # invert the y-axis to align with eyelink dataviewer origins and coordinates

            plt.gca().xaxis.tick_top()

            plt.scatter(epoch_x, epoch_y, color='skyblue', marker='o', s=15) # 

            if save_png and save_path:
                output_path = os.path.join(save_path, 'epoch_{index}_AOI')
                plt.savefig(os.path.join(save_path, f'epoch_{index}_AOI.png'))
                print(f"Saved PNG file to {output_path}")

            plt.show()
